
Reversi.AI.ImproveSearch.NegaAlpha {
    _depth  = _argv[0]
    Reversi.AI.ImproveSearch.NegaAlpha.internal(_depth, -C.inf, C.inf)
    return
}

Reversi.AI.ImproveSearch.NegaAlpha.internal {
    _depth  = _argv[0]
    _alpha  = _argv[1]
    _beta   = _argv[2]

    if Reversi.isGameOver {
        _score  = Reversi.finalScore
        _v  = IARRAY
        if _score > 0 {
            _v      = (C.null_move, color * (C.inf - 1))
        }
        elseif _score < 0 {
            _v      = (C.null_move, -color * (C.inf - 1))
        }
        else {
            _v      = (C.null_move, 0)
        }
        _v
        return
    }

    if _depth <= 0 {
        _score  = Reversi.AI.BaseAI.evaluate
        _v  = (C.null_move, _score)
        _v
        return
    }

    if Reversi.isPass() {
        _v  = Reversi.AI.ImproveSearch.NegaAlpha.internal/
            (_depth - 1, -_beta, -_alpha)
        _v[0]   = C.null_move
        _v[1]   = -_v[1]
        _v
        return
    }

    _move   = -1
    _score  = -C.inf

    foreach Reversi.generateMoves; _m {
        _pos    = Reversi.toPos(_m)
        _x      = _pos[0]
        _y      = _pos[1]
        // バックアップ
        _board  = board
        _color  = color
        // 1手進める
        _   = Reversi.reverse(_x, _y, 1)
        color   = -color
        // 1手進めた局面で再帰的にNegaAlpha法を行う
        _v  = Reversi.AI.ImproveSearch.NegaAlpha.internal/
            (_depth - 1, -_beta, -_alpha)
        _v[1]   = -_v[1]
        // 盤面を戻す
        board   = _board
        color   = _color

        // 先後ともに、自分にとって良い手だったら_score,_moveを更新する
        if _v[1] > _score {
            _alpha  = _v[1]
            _score  = _v[1]
            _move   = _m
            // 枝刈り
            if _score >= _beta {
                break
            }
        }
    }
    _v  = (_move, _score)
    _v
    return
}

